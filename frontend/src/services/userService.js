/**
 * üë§ User Service - Gerenciamento de usu√°rios
 * 
 * Cont√©m todos os m√©todos relacionados ao CRUD de usu√°rios,
 * abstraindo as chamadas de API e fornecendo uma interface limpa.
 */

import { api } from './api.js'

export const userService = {
  /**
   * üìã Listar todos os usu√°rios
   */
  async getAll() {
    return await api.get('/users')
  },

  /**
   * üë§ Buscar usu√°rio por ID
   */
  async getById(id) {
    return await api.get(`/users/${id}`)
  },

  /**
   * ‚ûï Criar novo usu√°rio
   */
  async create(userData) {
    // Se tem arquivo, usar FormData
    if (userData.profileImageFile) {
      const formData = new FormData()
      
      // Adicionar campos do formul√°rio
      formData.append('full_name', userData.fullName)
      formData.append('age', userData.age)
      formData.append('street', userData.street)
      formData.append('neighborhood', userData.neighborhood)
      formData.append('state', userData.state)
      formData.append('biography', userData.biography)
      formData.append('profile_image', userData.profileImageFile)
      
      return await api.post('/users', formData)
    }
    
    // Caso contr√°rio, usar JSON
    return await api.post('/users', {
      full_name: userData.fullName,
      age: parseInt(userData.age),
      street: userData.street,
      neighborhood: userData.neighborhood,
      state: userData.state,
      biography: userData.biography
    })
  },

  /**
   * ‚úèÔ∏è Atualizar usu√°rio
   */
  async update(id, userData) {
    // Se tem arquivo, usar FormData
    if (userData.profileImageFile) {
      const formData = new FormData()
      
      // Adicionar campos do formul√°rio
      formData.append('full_name', userData.fullName)
      formData.append('age', userData.age)
      formData.append('street', userData.street)
      formData.append('neighborhood', userData.neighborhood)
      formData.append('state', userData.state)
      formData.append('biography', userData.biography)
      formData.append('profile_image', userData.profileImageFile)
      formData.append('_method', 'PUT') // Method spoofing para Laravel
      
      return await api.post(`/users/${id}`, formData)
    }
    
    // Caso contr√°rio, usar JSON
    return await api.put(`/users/${id}`, {
      full_name: userData.fullName,
      age: parseInt(userData.age),
      street: userData.street,
      neighborhood: userData.neighborhood,
      state: userData.state,
      biography: userData.biography
    })
  },

  /**
   * üóëÔ∏è Deletar usu√°rio
   */
  async delete(id) {
    return await api.delete(`/users/${id}`)
  }
}
